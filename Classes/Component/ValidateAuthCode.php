<?php

namespace Rfuehricht\Formhandler\Component;

use Exception;
use Psr\Http\Message\ResponseInterface;
use TYPO3\CMS\Core\Database\ConnectionPool;
use TYPO3\CMS\Core\Database\Query\Restriction\HiddenRestriction;
use TYPO3\CMS\Core\Http\HtmlResponse;
use TYPO3\CMS\Core\Http\RedirectResponse;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Mvc\Web\Routing\UriBuilder;

/**
 * Validate an auth code generated by GenerateAuthCode.
 *
 * Render template or redirect to a page on error/success
 */
class ValidateAuthCode extends AbstractComponent
{

    private ?UriBuilder $uriBuilder = null;

    public function process(): array|ResponseInterface
    {
        if (empty($this->gp['authCode'])) {
            return $this->gp;
        }

        try {
            $authCode = trim($this->gp['authCode']);
            $table = trim($this->settings['table'] ?? $this->gp['table'] ?? '');
            if (!$table) {
                return $this->gp;
            }

            // UID to use for the table
            $uidField = trim($this->settings['uidField'] ?? $this->gp['uidField'] ?? 'uid');

            // Get UID to query table for
            $uid = trim($this->gp['uid']);
            if (empty($uid)) {
                $this->formUtility->throwException('validateauthcode_insufficient_params');
            }

            // Get hidden field to use for the activation state

            $hiddenField = $this->settings['hiddenField'] ?? $GLOBALS['TCA'][$table]['ctrl']['enablecolumns']['disabled'] ?? 'disable';

            // Value to mark a authCode as inactive
            $hiddenStatusValue = $this->settings['hiddenStatusValue'] ?? 1;

            // Get fields to select to create authCode for
            $selectFields = ['*'];
            if (isset($this->settings['selectFields'])) {
                $selectFields = GeneralUtility::trimExplode(',', $this->settings['selectFields']);
            }

            // Create queryBuilder for the selected table
            $queryBuilder = GeneralUtility::makeInstance(ConnectionPool::class)
                ->getQueryBuilderForTable($table);

            $queryBuilder->getRestrictions()->removeByType(HiddenRestriction::class);

            // Select authCode entry from the table
            $authCodeEntry = $queryBuilder->select(...$selectFields)
                ->from($table)
                ->andWhere(
                    $queryBuilder->expr()->eq($uidField, $queryBuilder->createNamedParameter($uid)),

                    // Only select values, that have not yet been activated
                    $queryBuilder->expr()->eq($hiddenField, $queryBuilder->createNamedParameter($hiddenStatusValue))
                )->executeQuery()
                ->fetchAssociative();

            if (empty($authCodeEntry)) {
                $this->formUtility->throwException('validateauthcode_no_record_found');
            }

            // Check if GP authCode is the same as the authCode from the database
            $localAuthCode = $this->formUtility->generateAuthCode($authCodeEntry);

            if ($localAuthCode !== $authCode) {
                $this->formUtility->throwException('validateauthcode_invalid_auth_code');
            }

            // Value to mark an authCode entry as active
            $activeStatusValue = $this->settings['activeStatusValue'] ?? 0;


            // Update authCode entry

            $queryBuilder->update($table)
                ->set($hiddenField, $activeStatusValue)
                ->where(
                    $queryBuilder->expr()->eq($uidField, $queryBuilder->createNamedParameter($uid))
                )
                ->executeStatement();

            $successPage = $this->settings['success']['redirectPage'] ?? '';
            $successContent = $this->settings['success']['content'] ?? '';

            if ($successPage) {
                return new RedirectResponse(
                    uri: $this->uriBuilder->reset()->setTargetPageUid($successPage)->buildFrontendUri(),
                    status: $this->settings['success']['statusCode'] ?? 302,
                    headers: $this->settings['success']['additionalHeaders'] ?? []

                );
            } elseif ($successContent) {
                return new HtmlResponse($successContent);
            }
        } catch (Exception $e) {
            $errorPage = $this->settings['error']['redirectPage'] ?? '';
            $errorContent = $this->settings['error']['content'] ?? '';
            if ($errorPage) {
                return new RedirectResponse(
                    uri: $this->uriBuilder->reset()->setTargetPageUid($errorPage)->buildFrontendUri(),
                    status: $this->settings['error']['statusCode'] ?? 302,
                    headers: $this->settings['error']['additionalHeaders'] ?? []

                );
            } elseif ($errorContent) {
                return new HtmlResponse($errorContent);
            } else {
                throw new Exception($e->getMessage());
            }
        }

        return $this->gp;
    }

    public function injectUriBuilder(UriBuilder $uriBuilder): void
    {
        $this->uriBuilder = $uriBuilder;
    }
}
